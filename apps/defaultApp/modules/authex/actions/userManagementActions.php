<?php

namespace mpcmf\modules\authex\actions;

use mpcmf\modules\authex\mappers\groupMapper;
use mpcmf\modules\authex\mappers\userMapper;
use mpcmf\modules\moduleBase\actions\action;
use mpcmf\modules\moduleBase\actions\actionsBase;
use mpcmf\system\exceptions\actionException;
use mpcmf\system\pattern\singleton;

/**
 * Class userManagementActions
 *
 * User management system
 *
 *
 * @generated by mpcmf/codeManager
 *
 * @package mpcmf\modules\authex\actions;
 * @date 2015-08-18 16:31:45
 *
 * @author Dmitry Emelyanov <gilberg.vrn@gmail.com>
 */
class userManagementActions
    extends actionsBase
{

    use singleton;

    /**
     * Set options inside this method
     *
     * @return mixed
     */
    public function setOptions()
    {
        $this->options['crud.enabled'] = false;
        $this->options['api.enabled'] = false;
    }

    /**
     * Bind some custom actions
     *
     * @return mixed
     * @throws actionException
     */
    public function bind()
    {
        $userKey = userMapper::getInstance()->getKey();
        $groupKey = groupMapper::getInstance()->getKey();

        $this->registerAction('userManagement.main', new action([
            'name' => 'Панель управления',
            'method' => '_main',
            'path' => '/userManagement',
            'http' => [
                'GET'
            ],
            'required' => [],
            'useBase' => true,
            'template' => 'userManagement/main.tpl',
            'relative' => false,
            'type' => action::TYPE__GLOBAL,
            'acl' => [],
        ], $this));
        $this->registerAction('userManagement.groupUpdate', new action([
            'name' => 'Обновление группы',
            'method' => '_groupUpdate',
            'path' => "/groupUpdate/:{$groupKey}",
            'http' => [
                'GET',
                'POST'
            ],
            'required' => [
                $groupKey
            ],
            'useBase' => true,
            'template' => 'userManagement/groupUpdate.tpl',
            'relative' => false,
            'type' => action::TYPE__DEFAULT,
            'acl' => [],
        ], $this));
        $this->registerAction('userManagement.groupGet', new action([
            'name' => 'Просмотр группы',
            'method' => '_groupGet',
            'path' => "/groupGet/:{$groupKey}",
            'http' => [
                'GET'
            ],
            'required' => [
                $groupKey
            ],
            'useBase' => true,
            'template' => 'userManagement/groupGet.tpl',
            'relative' => false,
            'type' => action::TYPE__DEFAULT,
            'acl' => [],
        ], $this));
        $this->registerAction('userManagement.userUpdate', new action([
            'name' => 'Обновление пользователя',
            'method' => '_userUpdate',
            'path' => "/userUpdate/:{$userKey}",
            'http' => [
                'GET',
                'POST'
            ],
            'required' => [
                $userKey
            ],
            'useBase' => true,
            'template' => 'userManagement/userUpdate.tpl',
            'relative' => false,
            'type' => action::TYPE__DEFAULT,
            'acl' => [],
        ], $this));
        $this->registerAction('userManagement.userGet', new action([
            'name' => 'Просмотр пользователя',
            'method' => '_userGet',
            'path' => "/userGet/:{$userKey}",
            'http' => [
                'GET'
            ],
            'required' => [
                $userKey
            ],
            'useBase' => true,
            'template' => 'userManagement/userGet.tpl',
            'relative' => false,
            'type' => action::TYPE__DEFAULT,
            'acl' => [],
        ], $this));
        $this->registerAction('userManagement.userTokenUpdate', new action([
            'name' => 'Обновить пользовательский токен',
            'method' => '_userTokenUpdate',
            'path' => "/userTokenUpdate/:{$userKey}",
            'http' => [
                'POST'
            ],
            'required' => [
                $userKey
            ],
            'useBase' => true,
            'template' => 'json.pretty.tpl',
            'relative' => false,
            'type' => action::TYPE__DEFAULT,
            'acl' => [],
        ], $this));
    }
}