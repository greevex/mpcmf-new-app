<?php

namespace mpcmf\modules\authex\controllers;

use mpcmf\modules\authex\mappers\tokenMapper;
use mpcmf\modules\authex\models\tokenModel;
use mpcmf\modules\authex\models\userModel;
use mpcmf\modules\moduleBase\controllers\controllerBase;
use mpcmf\modules\moduleBase\models\modelBase;
use mpcmf\system\acl\aclManager;
use mpcmf\modules\moduleBase\exceptions\mapperException;
use mpcmf\system\token\tokenManager;
use mpcmf\system\pattern\singleton;

/**
 * Class tokenController
 *
 * Tokens for access to api
 *
 *
  * @generated by mpcmf/codeManager
 *
 * @package mpcmf\modules\authex\controllers;
 * @date 2015-08-17 15:33:33
 *
 * @author Dmitry Emelyanov <gilberg.vrn@gmail.com>
 */
class tokenController
    extends controllerBase
{

    use singleton;

    /**
     * @param userModel|modelBase $user
     *
     * @return array
     * @throws \mpcmf\modules\moduleBase\exceptions\mapperException
     * @throws \mpcmf\system\acl\exception\aclException
     * @throws \mpcmf\system\application\exception\webApplicationException
     */
    public function _token_generate($user = null)
    {
        $slim = $this->getSlim();
        if ($user === null) {
            $user = aclManager::getInstance()->getCurrentUser();
        }
        $tokenMapper = tokenMapper::getInstance();
        if ($slim->request()->isPost() && $slim->request->post('updateToken') === 'true') {
            try {
                /** @var tokenModel $tokenModel */
                $tokenModel = $tokenMapper->getBy([
                    tokenMapper::FIELD__USER => $user->getUserId()
                ]);
            } catch (mapperException $mapperException) {
                $tokenModel = tokenModel::fromArray([
                    tokenMapper::FIELD__USER => $user->getUserId(),
                    tokenMapper::FIELD__LIMIT => tokenMapper::DEFAULT_LIMIT
                ]);
            }

            $tokenString = tokenManager::getInstance()->generateToken($tokenModel);

            $result = [
                'token' => $tokenString
            ];

            $this->getSlim()->response()->header('Content-type', 'application/json');
            $this->getSlim()->response()->write(json_encode($result, JSON_UNESCAPED_UNICODE));
            $this->getSlim()->stop();
        }

        return self::nothing([]);
    }

    public function _token_getInfo()
    {
        $slim = $this->getSlim();

        $tokenString = $slim->request->params('access_token');
        if (empty($tokenString)) {
            //@todo remove this hack
            $tokenString = $slim->request->params('token');
        }

        if (empty($tokenString)) {
            return self::error(self::error([
                'access_token' => 'param required'
            ]));
        }

        $tokenData = tokenManager::getInstance()->decode($tokenString);

        $this->getSlim()->response()->header('Content-type', 'application/json');

        if ($tokenData === false) {
            $tokenObject = null;
        } else {
            $tokenObject = $this->getMapper()->getById($tokenData['i'])->export();
        }

        return [
            'data' => self::success([
                'access_token' => $tokenString,
                'tokenData' => $tokenData,
                'tokenObject' => $tokenObject
            ])
        ];
    }
}