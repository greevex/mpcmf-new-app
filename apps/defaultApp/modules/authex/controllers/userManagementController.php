<?php

namespace mpcmf\modules\authex\controllers;

use mpcmf\modules\authex\entities\group;
use mpcmf\modules\authex\entities\user;
use mpcmf\modules\authex\mappers\groupMapper;
use mpcmf\modules\authex\mappers\tokenMapper;
use mpcmf\modules\authex\mappers\userMapper;
use mpcmf\modules\authex\models\groupModel;
use mpcmf\modules\authex\models\userModel;
use mpcmf\modules\moduleBase\controllers\controllerBase;
use mpcmf\modules\moduleBase\exceptions\mapperException;
use mpcmf\modules\moduleBase\exceptions\modelException;
use mpcmf\system\helper\io\codes;
use mpcmf\system\pattern\singleton;

/**
 * Class userManagementController
 *
 * User management system
 *
 *
  * @generated by mpcmf/codeManager
 *
 * @package mpcmf\modules\authex\controllers;
 * @date 2015-08-18 16:31:45
 *
 * @author Dmitry Emelyanov <gilberg.vrn@gmail.com>
 */
class userManagementController
    extends controllerBase
{

    use singleton;

    public function _main()
    {
        return self::nothing([
            'user' => user::getInstance(),
            'group' => group::getInstance(),
        ]);
    }

    public function _groupGet($id)
    {
        try {
            /** @var groupMapper $user */
            $group = groupMapper::getInstance()->getById($id);
        } catch (mapperException $mapperException) {
            return self::errorByException($mapperException);
        }

        return self::success([
            'group' => $group,
            'userMapper' => userMapper::getInstance()
        ]);
    }

    public function _groupUpdate($id)
    {

        try {
            /** @var groupModel $group */
            $group = groupMapper::getInstance()->getById($id);
        } catch(mapperException $mapperException) {
            return self::errorByException($mapperException, $mapperException->getCode());
        }

        if($this->getSlim()->request()->isPost()) {
            $inputItem = $this->getSlim()->request()->post('item');

            $item = $group->getMapper()->convertDataFromForm($inputItem, $group);

            if (!$this->checkInputByValidator($item, $errors)) {

                return self::error([
                    'item' => $group,
                    'errors' => $errors
                ], codes::RESPONSE_CODE_FORM_FIELDS_ERROR);
            }

            try {
                $group->updateFields($item);
            } catch(modelException $exception) {
                return self::errorByException($exception, codes::RESPONSE_CODE_FAIL);
            }
            try {
                $result = $group->getMapper()->updateById($id, $group);
            } catch (mapperException $mapperException) {

                return self::errorByException($mapperException, codes::RESPONSE_CODE_FAIL);
            }

            return self::success([
                'result' => $result,
                'group' => $group,
            ], codes::RESPONSE_CODE_SAVED);
        }

        return self::nothing([
            'group' => $group,
        ]);
    }

    public function _userUpdate($id)
    {
        try {
            /** @var userModel $user */
            $user = userMapper::getInstance()->getById($id);
        } catch(mapperException $mapperException) {
            return self::errorByException($mapperException, $mapperException->getCode());
        }

        try {
            $userToken = tokenMapper::getInstance()->getBy([tokenMapper::FIELD__USER => $user->getIdValue()]);
        } catch (mapperException $mapperException) {
            $userToken = null;
        }

        if($this->getSlim()->request()->isPost()) {
            $inputItem = $this->getSlim()->request()->post('item');

            $item = $user->getMapper()->convertDataFromForm($inputItem, $user);

            if (!$this->checkInputByValidator($item, $errors)) {

                return self::error([
                    'item' => $user,
                    'errors' => $errors
                ], codes::RESPONSE_CODE_FORM_FIELDS_ERROR);
            }

            try {
                $user->updateFields($item);
            } catch(modelException $exception) {
                return self::errorByException($exception, codes::RESPONSE_CODE_FAIL);
            }
            try {
                $result = $user->getMapper()->updateById($id, $user);
            } catch (mapperException $mapperException) {

                return self::errorByException($mapperException, codes::RESPONSE_CODE_FAIL);
            }

            return self::success([
                'result' => $result,
                'user' => $user,
            ], codes::RESPONSE_CODE_SAVED);
        }

        return self::nothing([
            'user' => $user,
            'userToken' => $userToken,
        ]);
     }

    public function _userGet($id)
    {
        try {
            /** @var userModel $user */
            $user = userMapper::getInstance()->getById($id);
        } catch (mapperException $mapperException) {
            return self::errorByException($mapperException);
        }
        try {
            $userToken = tokenMapper::getInstance()->getBy([tokenMapper::FIELD__USER => $user->getIdValue()]);
        } catch (mapperException $mapperException) {
            $userToken = null;
        }
        return self::success([
            'user' => $user,
            'userToken' => $userToken,
        ]);
    }

    public function _userTokenUpdate($userId)
    {
        try {
            /** @var userModel $user */
            $user = userMapper::getInstance()->getById($userId);
        } catch (mapperException $mapperException) {
            return self::errorByException($mapperException);
        }

        return tokenController::getInstance()->_token_generate($user);
    }
}