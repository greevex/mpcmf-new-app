<?php

namespace mpcmf\modules\authex\models;

use mpcmf\modules\authex\mappers\tokenMapper;
use mpcmf\modules\moduleBase\models\modelBase;
use mpcmf\system\pattern\singleton;

/**
 * Class tokenModel
 *
 * Tokens for access to api
 *
 *
  * @generated by mpcmf/codeManager
 *
 * @package mpcmf\modules\authex\models
 * @date 2015-08-17 15:33:33
 *
 * @author Dmitry Emelyanov <gilberg.vrn@gmail.com>
 *
 * @method string getMongoId() Mongo ID
 * @method $this setMongoId(string $value) Mongo ID
 * @method string getToken() Token string
 * @method $this setToken(string $value) Token string
 * @method int getLimit() Limit per hour
 * @method $this setLimit(int $value) Limit per hour
 * @method int getExpire() When token would be expired
 * @method $this setExpire(int $value) When token would be expired
 * @method int getActivity() Token last activity date
 * @method $this setActivity(int $value) Token last activity date
 * @method int getUnlimited() Is token unlimited
 * @method $this setUnlimited(int $value) When token would be expired
 * @method string getUserId() User, who assigned with this token
 * @method $this setUserId(string $value) User, who assigned with this token
 * @method string getRequests() Total requests count
 * @method $this setRequests(int $value) Total requests count
 * @method userModel getUser() User, who assigned with this token
 * @method $this setUser(userModel $user) User, who assigned with this token
 */
class tokenModel
    extends modelBase
{

    use singleton;

    public static function generateToken()
    {
        return sha1(microtime());
    }

    public function minify()
    {
        $data = $this->export();
        $data = $this->getMapper()->convertDataFromForm($data);

        return [
            'i' => (string)$data[tokenMapper::FIELD___ID], //id
            'g' => $this->getUser()->getGroupIds(), //groups
            'e' => $data[tokenMapper::FIELD__EXPIRE], //expire
            'n' => $data[tokenMapper::FIELD__UNLIMITED], //bool
        ];
    }
}