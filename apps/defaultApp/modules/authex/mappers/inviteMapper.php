<?php
namespace mpcmf\modules\authex\mappers;

use mpcmf\modules\authex\models\inviteModel;
use mpcmf\modules\authex\models\userModel;
use mpcmf\modules\moduleBase\mappers\mapperBase;
use mpcmf\modules\moduleBase\exceptions\mapperException;
use mpcmf\system\pattern\singleton;

/**
 * Class inviteMapper
 *
 * Invite system
 *
 *
  * @generated by mpcmf/codeManager
 *
 * @package mpcmf\modules\authex\mappers
 * @date 2015-10-01 12:35:13
 *
 * @author Dmitry Emelyanov <gilberg.vrn@gmail.com>
 */
class inviteMapper
    extends mapperBase
{

    use singleton;

    const FIELD__DATE = 'date';
    const FIELD__EMAIL = 'email';
    const FIELD__INVITE = 'invite';
    const FIELD__REFERER = 'referer';
    const FIELD__USED = 'used';
    const FIELD__GROUPS = 'groups';

    public function getPublicName()
    {
        return 'Invite';
    }

    public function createInvite($input, userModel $refererModel = null)
    {
        $email = $input['email'];
        $groups = (isset($input['groups']) && is_array($input['groups'])) ? $input['groups'] : [];
        try {
            $existingInvite = $this->getById($email);
        } catch (mapperException $mapperException) {
            if (mb_strpos($mapperException->getMessage(), 'not found') === false) {
                throw $mapperException;
            }
        }

        if (isset($existingInvite)) {
            return [
                'status' => false,
            ];
        }

        $newInviteFields = [
            self::FIELD__DATE => time(),
            self::FIELD__EMAIL => $email,
            self::FIELD__USED => false,
            self::FIELD__GROUPS => $groups
        ];

        if ($refererModel !== null) {
            $newInviteFields[self::FIELD__REFERER] = $refererModel->getIdValue();
        }

        /** @var inviteModel $inviteModel */
        $inviteModel = $this->getModel();

        /** @var inviteModel $newInvite */
        $newInvite = $inviteModel->fromArray($newInviteFields);

        $inviteString = $inviteModel->generateInviteString($email);

        $newInvite->setInvite($inviteString);
        $newInvite->sendInvite($refererModel);

        $this->save($newInvite);

        return [
            'status' => true,
            'invite' => $newInvite->export()
        ];
    }

    /**
     * Entity map
     *
     * @return array[]
     */
    public function getMap()
    {
        return [
            self::FIELD__EMAIL => [
                'getter' => 'getEmail',
                'setter' => 'setEmail',
                'role' => [
                    'key' => true,
                    'title' => true,
                    'searchable' => true,
                ],
                'name' => 'Email',
                'description' => 'Email',
                'type' => 'string',
                'formType' => 'text',
                'validator' => [
                ],
                'relations' => [
                ],
                'options' => [
                    'required' => true,
                    'unique' => true,
                ],
            ],
            self::FIELD__DATE => [
                'getter' => 'getDate',
                'setter' => 'setDate',
                'role' => [
                    'sortable' => true,
                ],
                'name' => 'Date',
                'description' => 'Date',
                'type' => 'int',
                'formType' => 'datetimepicker',
                'validator' => [
                ],
                'relations' => [
                ],
                'options' => [
                    'required' => false,
                    'unique' => false,
                ],
            ],
            self::FIELD__INVITE => [
                'getter' => 'getInvite',
                'setter' => 'setInvite',
                'role' => [
                ],
                'name' => 'Invite',
                'description' => 'Invite',
                'type' => 'string',
                'formType' => 'text',
                'validator' => [
                ],
                'relations' => [],
                'options' => [
                    'required' => false,
                    'unique' => true,
                ],
            ],
            self::FIELD__REFERER => [
                'getter' => 'getReferer',
                'setter' => 'setReferer',
                'role' => [
                ],
                'name' => 'Referer',
                'description' => 'Referer',
                'type' => 'string',
                'formType' => 'select',
                'validator' => [
                ],
                'relations' => [
                    'referer' => [
                        'getter' => 'getRefererModel',
                        'setter' => 'setRefererModel',
                        'relation' => self::RELATION__ONE_TO_ONE,
                        'mapper' => userMapper::class,
                    ]
                ],
                'options' => [
                    'required' => false,
                    'unique' => false,
                ],
            ],
            self::FIELD__USED => [
                'getter' => 'getUsed',
                'setter' => 'setUsed',
                'role' => [
                    'sortable' => true,
                ],
                'name' => 'Used',
                'description' => 'Used',
                'type' => 'boolean',
                'formType' => 'checkbox',
                'validator' => [
                ],
                'relations' => [
                ],
                'options' => [
                    'required' => false,
                    'unique' => false,
                ],
            ],
            self::FIELD__GROUPS => [
                'getter' => 'getGroupIds',
                'setter' => 'setGroupIds',
                'type' => 'string[]',
                'formType' => 'searcheblemultiselect',
                'name' => 'Группы пользователя',
                'description' => 'Список групп доступа, в которых состоит пользователь',
                'validator' => [
                    [
                        'type' => 'type.check',
                        'data' => [
                            'type' => 'string'
                        ]
                    ],
                    [
                        'type' => 'string.byRegex',
                        'data' => [
                            'pattern' => '/^[\pL]{2,}/ui'
                        ]
                    ]
                ],
                'relations' => [
                    'group' => [
                        'getter' => 'getGroups',
                        'setter' => 'setGroups',
                        'type' => self::RELATION__MANY_TO_MANY,
                        'mapper' => groupMapper::class
                    ]
                ],
                'options' => [
                    'required' => false,
                    'unique' => false
                ]
            ],
        ];
    }

    public function getInvitesByUserModel(userModel $userModel)
    {
        return $this->getInvitesByUserId($userModel->getIdValue());
    }

    private function getInvitesByUserId($getIdValue)
    {
        return $this->getAllBy([
            self::FIELD__REFERER => $getIdValue
        ]);
    }
}